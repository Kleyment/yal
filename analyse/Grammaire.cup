package yal.analyse ;

import java.util.*;

import yal.analyse.tds.*;
import yal.analyse.tds.entree.*;
import yal.analyse.tds.symbole.*;

import yal.arbre.* ;
import yal.arbre.expression.* ;
import yal.arbre.expression.binaire.arithmetique.* ;
import yal.arbre.expression.binaire.comparaison.* ;
import yal.arbre.expression.binaire.logique.* ;
import yal.arbre.expression.constante.*;
import yal.arbre.expression.unaire.*;
import yal.arbre.instruction.*;

import yal.exceptions.AnalyseSyntaxiqueException;

import java_cup.runtime.*;

action code {: 

:};

parser code {:

    public void report_error(String message, Object info) {

        HashMap<Integer, String> lesTerminaux = new HashMap<>() ;
    
        lesTerminaux.put(new Integer(CodesLexicaux.PLUS), "+") ;
        lesTerminaux.put(new Integer(CodesLexicaux.MOINS), "-") ;
        lesTerminaux.put(new Integer(CodesLexicaux.MULT), "*") ;
        lesTerminaux.put(new Integer(CodesLexicaux.DIV), "/") ;
        lesTerminaux.put(new Integer(CodesLexicaux.PAROUV), "(") ;
        lesTerminaux.put(new Integer(CodesLexicaux.PARFER), ")") ;
        lesTerminaux.put(new Integer(CodesLexicaux.CROCHOUV), "[") ;
        lesTerminaux.put(new Integer(CodesLexicaux.CROCHFER), "]") ;
        lesTerminaux.put(new Integer(CodesLexicaux.POINT), ".") ;
        lesTerminaux.put(new Integer(CodesLexicaux.SUP), ">") ;
        lesTerminaux.put(new Integer(CodesLexicaux.INF), "<") ;
        lesTerminaux.put(new Integer(CodesLexicaux.EGALEGAL), "==") ;
        lesTerminaux.put(new Integer(CodesLexicaux.DIFF), "!=") ;
        lesTerminaux.put(new Integer(CodesLexicaux.ET), "et") ;
        lesTerminaux.put(new Integer(CodesLexicaux.OU), "ou") ;
        lesTerminaux.put(new Integer(CodesLexicaux.NON), "non") ;
		lesTerminaux.put(new Integer(CodesLexicaux.LONGUEUR), "longueur") ;

        StringBuffer m = new StringBuffer() ;

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {                
                m.append("\tligne : " + (s.left + 1)) ;
                if (s.right >= 0)                    
                    m.append(" colonne : " + (s.right+1)) ;
            }
            
            if (s.value != null) {
                lesTerminaux.put(CodesLexicaux.CONSTANTEINT, "" + s.value) ;
                lesTerminaux.put(CodesLexicaux.CONSTANTEBOOL, "" + s.value) ;
            }

            if (lesTerminaux.containsKey(new Integer(s.sym))) {
                m.append(" dernier token lu : " + lesTerminaux.get(new Integer(s.sym))) ;
            }
            else {
                m.append(" expression non termin√©e") ;
            }

        }
        throw new AnalyseSyntaxiqueException("" + m) ;
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }
:};
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
/* Terminals (tokens returned by the scanner).  */

terminal Symbol    SYM_PROG, DEBUT, FIN, FONCTION, SYM_RETOURNE;
terminal Symbol    POINTVIRGULE, VIRGULE, POINT;
terminal Symbol    PLUS, MOINS, MULT, DIV, PAROUV, PARFER, CROCHOUV, CROCHFER;
terminal Symbol    SUP, INF, EGALEGAL, DIFF, ET, OU, NON, LONGUEUR;
terminal Symbol    EGAL;
terminal Symbol    SI, ALORS, SINON, FINSI;
terminal Symbol    TANTQUE, REPETER, FINTANTQUE;
terminal Symbol    SYM_ECRIRE, SYM_LIRE;
terminal String    TYPE, IDF;
terminal String    CONSTANTECHAINE, CONSTANTEINT, CONSTANTEBOOL;

/* Non terminals used in the grammar section.  */

non terminal Programme PROG;
non terminal BlocDInstructions LINST, LDECL, LDECLV, PARAMETRES, LPARAM;
non terminal Instruction DECL, DECL_FONCTION, DECL_VAR;
non terminal Instruction INST, AFFECT, RETOURNE; 
non terminal Instruction BOUCLE, CONDITION;
non terminal Instruction ECRIRE, LIRE;
non terminal Expression EXPR, CSTE;
non terminal ArrayList<Expression> PAR_EFF;
non terminal String FCT;

/* Precedences of operators */

precedence left OU ;
precedence left ET ;
precedence left EGALEGAL, DIFF;
precedence left INF, SUP;
precedence left PLUS, MOINS;
precedence left MULT, DIV ;
precedence left NON ;

/* ----------------------------Grammar Section-------------------- */
 
start with PROG;

PROG    ::=    SYM_PROG IDF:nom DEBUT LDECL:ld LINST:li FIN
               {:
               RESULT = new Programme(ld, li, nom, nomleft+1); 
                  TDS.getInstance().sortieBloc();
               :}    
        |
               SYM_PROG IDF:nom DEBUT LINST:li FIN
               {: RESULT = new Programme(li, nom, nomleft+1); 
             	  TDS.getInstance().sortieBloc(); 
               :}
               ;
               
LINST   ::=    LINST:li INST:i
               {: li.ajouter(i);
		          RESULT = li;
		       :}
        |      
               INST:i
	           {: BlocDInstructions li = new BlocDInstructions(ileft+1);
		          li.ajouter(i);
		          RESULT = li;
		       :}
	           ;
	           
LDECL    ::=    LDECL:li DECL:d
                {: if (d != null) {
                       li.ajouter(d);
                   }
                   
                   RESULT = li;
                :}
         |
                DECL:d
                {: BlocDInstructions li = new BlocDInstructions(dleft+1);
                
		    	   if (d != null) {
		      	       li.ajouter(d);
		      	   }
		      	   
                   RESULT = li; 
                :}
                ;
                	
DECL    ::=    DECL_VAR:v 
               {: RESULT = v; :}
        | 
               DECL_FONCTION:f
               {: RESULT = f; :}
               ;      
         
LDECLV    ::=    LDECLV:ld DECL_VAR:v
                 {: if (v != null){
                 		ld.ajouter(v);
                 	}
                 	
                 	RESULT = ld;
                 :}
          |
                 DECL_VAR:v
                 {: BlocDInstructions ld = new BlocDInstructions(vleft+1);
                 
                 	if (v != null){
                 		ld.ajouter(v);
                 	}
                 	
                 	RESULT = ld;
                 :}  
                 ; 
                   
DECL_VAR    ::=    TYPE:t IDF:idf POINTVIRGULE
                   {: EntreeVariable entree = new EntreeVariable(idf);
                      SymboleVariable symbole = new SymboleVariable(t);
                      
                      TDS.getInstance().ajouter(entree, symbole, tleft+1); 
                   :}
            |
            	   TYPE:t CROCHOUV EXPR:e CROCHFER IDF:i POINTVIRGULE
            	   {: EntreeVariable entree = new EntreeVariable(i);
                      SymboleVariable symbole = new SymboleVariable(t);
                      
                      TDS.getInstance().ajouter(entree, symbole, tleft+1); 
                   :}
                   ;

DECL_FONCTION    ::=    FONCTION FCT:i PARAMETRES DEBUT LINST:li FIN
                        {: 
                           System.out.println("DECL_FONCTION");                      	   
                           RESULT = new Fonction(ileft+1,i,li);        
                           TDS.getInstance().sortieBloc();
                        :}
                 |
                        FONCTION FCT:i PARAMETRES DEBUT LDECLV:ld LINST:li FIN
                        {:
                           RESULT = new Fonction(ileft+1,i,ld,li);        
                           TDS.getInstance().sortieBloc();
                        :} 
                        ;
    
FCT			  ::=	IDF:i
					{:
						   System.out.println("FCT "+i);
						   EntreeFonction entree = new EntreeFonction(i, 0);
                           SymboleFonction symbole = new SymboleFonction("entier");
                           
                           TDS.getInstance().ajouter(entree, symbole, ileft+1);
                           RESULT = i;
    
    				:};
    				
PARAMETRES    ::=    PAROUV PARFER
                     {: 
                     	TDS.getInstance().entreeBloc();
                     :}
               |
                     PAROUV LPARAM PARFER
                     {: 
                     	TDS.getInstance().entreeBloc();
                     	//RESULT = lp;
                     :}
                     ;

LPARAM    ::=		LPARAM POINTVIRGULE TYPE:t IDF:i    
                   	{:
                   		EntreeVariable entree = new EntreeVariable(i);
                     	SymboleVariable symbole = new SymboleVariable(t);
                     	TDS.getInstance().ajouter(entree, symbole, tleft+1);
                     	/*lp.ajouter(new Variable(i, ileft+1));
                     	RESULT = lp;*/ 
                   	:}
                 |	TYPE:t IDF:i
                   	{:
						EntreeVariable entree = new EntreeVariable(i);
                     	SymboleVariable symbole = new SymboleVariable(t);                      
                     	TDS.getInstance().ajouter(entree, symbole, tleft+1);
                     	/*BlocDInstructions lp = new BlocDInstructions(tleft+1);
                     	lp.ajouter(new Variable(i, ileft+1)); /* C'est ptet faux 
                     	RESULT = lp;*/                   	
                 	:}
                   	;
                                                          		
INST    ::=    AFFECT:a
               {: RESULT = a; :}
        |
               BOUCLE:b
               {: RESULT = b; :}
        |
               CONDITION:c
               {: RESULT = c; :}
        |       
	           ECRIRE:e
               {: RESULT = e; :}
        |
               LIRE:l
               {: RESULT = l; :}
       |      
               RETOURNE:r
               {: RESULT = r; :} 
               ;
           
AFFECT    ::=    IDF:idf EGAL EXPR:exp POINTVIRGULE
                 {: RESULT = new Affectation(idf, exp); :}
          |
          		 IDF:i CROCHOUV EXPR:ind CROCHFER EGAL EXPR:e POINTVIRGULE
          		 {: 
          		   RESULT = new AffectationTableau(i, ind, e);
          		 :}
                 ;

BOUCLE    ::=    TANTQUE EXPR:exp REPETER LINST:li FINTANTQUE
                 {: RESULT = new Boucle(exp, li); :}
                 ;
                 
CONDITION    ::=    SI EXPR:exp ALORS FINSI
                    {: RESULT = new Condition(exp); :}
             |
                    SI EXPR:exp ALORS LINST:alors FINSI
                    {: RESULT = new Condition(exp, alors, false); :}
             |
                    SI EXPR:exp ALORS SINON LINST:sinon FINSI
                    {: RESULT = new Condition(exp, sinon, true); :}
             |
                    SI EXPR:exp ALORS LINST:alors SINON LINST:sinon FINSI
                    {: RESULT = new Condition(exp, alors, sinon); :}
                    ;
                       
ECRIRE    ::=    SYM_ECRIRE EXPR:exp POINTVIRGULE
                 {: RESULT = new Ecrire(exp); :}  
          |
                 SYM_ECRIRE CONSTANTECHAINE:c POINTVIRGULE
                 {: RESULT = new EcrireChaine(c, cleft+1); :}
                 ;                                     

LIRE    ::=    SYM_LIRE IDF:i POINTVIRGULE
               {: RESULT = new Lire(i, ileft+1); :}
               ;
                
RETOURNE    ::=    SYM_RETOURNE EXPR:exp POINTVIRGULE
                   {: RESULT = new Retourne(exp); :}
                   ;
                                        
EXPR    ::=     EXPR:g  PLUS  EXPR:d
                {: RESULT = new Plus(g, d) ; :}
        | 
                EXPR:g  MOINS  EXPR:d
                {: RESULT = new Moins(g, d); :}
        |                
                EXPR:g  MULT  EXPR:d
                {: RESULT = new Mult(g, d); :}
        |                
                EXPR:g  DIV  EXPR:d
                {: RESULT = new Div(g, d); :}
        |       
                EXPR:g  INF  EXPR:d
                {: RESULT = new Inferieur(g, d); :}
        |       
                EXPR:g  SUP  EXPR:d
                {: RESULT = new Superieur(g, d); :}
        |              
                EXPR:g  EGALEGAL  EXPR:d
                {: RESULT = new Egal(g, d); :}
        |       
                EXPR:g  DIFF  EXPR:d
                {: RESULT = new Different(g, d); :}
        |                      
                MOINS  EXPR:e  
                {: RESULT = new MoinsUnaire(e); :}
        |      
                EXPR:g  ET  EXPR:d
                {: RESULT = new EtLogique(g, d); :}
        |      
                EXPR:g  OU  EXPR:d
                {: RESULT = new OuLogique(g, d); :}
        |      
                NON EXPR:e
                {: RESULT = new NonLogique(e); :}
        |
                CSTE:c
                {: RESULT = c; :}
        |
                PAROUV  EXPR:e  PARFER
                {: RESULT = e; :}
        |       
                IDF:i
                {: 
                System.out.println("IDF");
                RESULT = new Variable(i, ileft+1); :}
        |
                IDF:i PAROUV PARFER
                {: RESULT = new Appel(i, ileft+1); :}
        |       
                IDF:i PAROUV PAR_EFF:par PARFER
                {: RESULT = new Appel(i, par, ileft+1); :}
        |
        		IDF:i CROCHOUV EXPR:e CROCHFER
        		{:
        		  RESULT = new Tableau(i, e, ileft);
        		:}
        |
        		IDF:i POINT LONGUEUR
        		{:
        		  RESULT = i.longueur();
        		:}
                ;

CSTE    ::=     CONSTANTEINT:e 
                {: RESULT = new ConstanteEntiere(e, eleft+1); :}
        |       CONSTANTEBOOL:e 
                {: RESULT = new ConstanteBool(e, eleft+1); :}
                ;
  
PAR_EFF    ::=    PAR_EFF:par VIRGULE EXPR:exp
                     {: par.add(exp);
		                RESULT = par;
		             :}
              |      
                     EXPR:exp
                     {: ArrayList<Expression> par = new ArrayList<Expression>();
                        par.add(exp);
		                RESULT = par;
                     :}
                     ;     